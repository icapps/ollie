{"version":3,"sources":["../../src/dialogs/boilerplate.dialog.js"],"names":["backendProject","find","name","frontendProject","iOSProject","androidProject","questions","backend","message","type","choices","map","boilerPlates","filter","answer","frontend","ios","IOSProject","android","AndroidProject","generalQuestions","BoilerplateDialog","concat","_getQuestionsForType","toLowerCase","prompt","then","answers","questionTypes","keys","includes","Error"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,iBAAiB,iBAAEC,IAAF,0BAAqB,EAAEC,MAAM,SAAR,EAArB,CAAvB;AACA,IAAMC,kBAAkB,iBAAEF,IAAF,0BAAqB,EAAEC,MAAM,UAAR,EAArB,CAAxB;AACA,IAAME,aAAa,iBAAEH,IAAF,0BAAqB,EAAEC,MAAM,KAAR,EAArB,CAAnB;AACA,IAAMG,iBAAiB,iBAAEJ,IAAF,0BAAqB,EAAEC,MAAM,SAAR,EAArB,CAAvB;;AAEA,IAAMI,YAAY;AAChBC,WAAS;AACPL,UAAM,aADC;AAEPM,aAAS,oDAFF;AAGPC,UAAM,MAHC;AAIPC,aAAS,iBAAEC,GAAF,CAAMX,eAAeY,YAArB,EAAmC,MAAnC,CAJF;AAKPC,YAAQ;AAAA,aAAU,iBAAEZ,IAAF,CAAOD,eAAeY,YAAtB,EAAoC,EAAEV,MAAMY,MAAR,EAApC,CAAV;AAAA;AALD,GADO;AAQhBC,YAAU;AACRb,UAAM,aADE;AAERM,aAAS,mGAFD;AAGRC,UAAM,MAHE;AAIRC,aAAS,iBAAEC,GAAF,CAAMR,gBAAgBS,YAAtB,EAAoC,MAApC,CAJD;AAKRC,YAAQ;AAAA,aAAU,iBAAEZ,IAAF,CAAOE,gBAAgBS,YAAvB,EAAqC,EAAEV,MAAMY,MAAR,EAArC,CAAV;AAAA;AALA,GARM;AAehBE,OAAK;AACHd,UAAM,aADH;AAEHM,aAAS,yDAFN;AAGHC,UAAM,MAHH;AAIHC,aAAS,iBAAEC,GAAF,CAAMP,WAAWQ,YAAjB,EAA+B,MAA/B,CAJN;AAKHC,YAAQ;AAAA,aAAU,iBAAEZ,IAAF,CAAOgB,WAAWL,YAAlB,EAAgC,EAAEV,MAAMY,MAAR,EAAhC,CAAV;AAAA;AALL,GAfW;AAsBhBI,WAAS;AACPhB,UAAM,aADC;AAEPM,aAAS,6DAFF;AAGPC,UAAM,MAHC;AAIPC,aAAS,iBAAEC,GAAF,CAAMN,eAAeO,YAArB,EAAmC,MAAnC,CAJF;AAKPC,YAAQ;AAAA,aAAU,iBAAEZ,IAAF,CAAOkB,eAAeP,YAAtB,EAAoC,EAAEV,MAAMY,MAAR,EAApC,CAAV;AAAA;AALD;AAtBO,CAAlB;;AA+BA,IAAMM,mBAAmB,CACvB;AACElB,QAAM,aADR;AAEEM,WAAS,uCAFX;AAGEC,QAAM;AAHR,CADuB,CAAzB;;IAQqBY,iB;AACnB,6BAAYZ,IAAZ,EAAkB;AAAA;;AAChB,SAAKH,SAAL,GAAiB,iBAAEgB,MAAF,CACf,EADe,EAEf,KAAKC,oBAAL,CAA0BjB,SAA1B,EAAqCG,KAAKe,WAAL,EAArC,CAFe,EAGfJ,gBAHe,CAAjB;AAKD;;;;4BAEO;AACN,aAAO,mBAASK,MAAT,CAAgB,KAAKnB,SAArB,EACJoB,IADI,CACC;AAAA,eAAWC,OAAX;AAAA,OADD,CAAP;AAED;;;yCAEoBrB,S,EAAWG,I,EAAM;AACpC,UAAIA,SAAS,KAAb,EAAoB;AAClB,eAAO,EAAP;AACD;;AAED,UAAMmB,gBAAgB,iBAAEC,IAAF,CAAOvB,SAAP,CAAtB;;AAEA,UAAIsB,cAAcE,QAAd,CAAuBrB,IAAvB,CAAJ,EAAkC;AAChC,eAAOH,UAAUG,IAAV,CAAP;AACD,OAFD,MAEO;AACL,cAAM,IAAIsB,KAAJ,4CAAkDtB,IAAlD,OAAN;AACD;AACF;;;;;;kBA1BkBY,iB","file":"boilerplate.dialog.js","sourcesContent":["import _ from 'lodash';\nimport inquirer from 'inquirer';\nimport { projectTypes } from './../constants';\n\nconst backendProject = _.find(projectTypes, { name: 'Backend' });\nconst frontendProject = _.find(projectTypes, { name: 'Frontend' });\nconst iOSProject = _.find(projectTypes, { name: 'iOS' });\nconst androidProject = _.find(projectTypes, { name: 'Android' });\n\nconst questions = {\n  backend: {\n    name: 'boilerplate',\n    message: 'So you are a backend dev, what kind are you today?',\n    type: 'list',\n    choices: _.map(backendProject.boilerPlates, 'name'),\n    filter: answer => _.find(backendProject.boilerPlates, { name: answer }),\n  },\n  frontend: {\n    name: 'boilerplate',\n    message: 'So you are a frontend developer, tell me what kind of web application you would like to generate?',\n    type: 'list',\n    choices: _.map(frontendProject.boilerPlates, 'name'),\n    filter: answer => _.find(frontendProject.boilerPlates, { name: answer }),\n  },\n  ios: {\n    name: 'boilerplate',\n    message: 'So you are an IOS developer, tell me what kind you are.',\n    type: 'list',\n    choices: _.map(iOSProject.boilerPlates, 'name'),\n    filter: answer => _.find(IOSProject.boilerPlates, { name: answer }),\n  },\n  android: {\n    name: 'boilerplate',\n    message: 'So you are an Android developer, tell me what kind you are.',\n    type: 'list',\n    choices: _.map(androidProject.boilerPlates, 'name'),\n    filter: answer => _.find(AndroidProject.boilerPlates, { name: answer }),\n  },\n};\n\nconst generalQuestions = [\n  {\n    name: 'projectName',\n    message: 'What will be the name of the project?',\n    type: 'string',\n  },\n];\n\nexport default class BoilerplateDialog {\n  constructor(type) {\n    this.questions = _.concat(\n      [],\n      this._getQuestionsForType(questions, type.toLowerCase()),\n      generalQuestions\n    );\n  }\n\n  start() {\n    return inquirer.prompt(this.questions)\n      .then(answers => answers);\n  }\n\n  _getQuestionsForType(questions, type) {\n    if (type === 'dev') {\n      return [];\n    }\n\n    const questionTypes = _.keys(questions);\n\n    if (questionTypes.includes(type)) {\n      return questions[type];\n    } else {\n      throw new Error(`This boilerplate type doens't exist: ${type}.`);\n    }\n  }\n}\n\n"]}