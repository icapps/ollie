{"version":3,"sources":["../../src/dialogs/boilerplate.dialog.js"],"names":["webProject","find","name","iOSProject","androidProject","questions","web","message","type","choices","map","boilerPlates","filter","answer","ios","android","generalQuestions","BoilerplateDialog","concat","_getQuestionsForType","toLowerCase","prompt","then","answers","questionTypes","keys","includes","Error"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,aAAa,iBAAEC,IAAF,0BAAqB,EAAEC,MAAM,KAAR,EAArB,CAAnB;AACA,IAAMC,aAAa,iBAAEF,IAAF,0BAAqB,EAAEC,MAAM,KAAR,EAArB,CAAnB;AACA,IAAME,iBAAiB,iBAAEH,IAAF,0BAAqB,EAAEC,MAAM,SAAR,EAArB,CAAvB;;AAEA,IAAMG,YAAY;AAChBC,OAAK;AACHJ,UAAM,aADH;AAEHK,aAAS,8FAFN;AAGHC,UAAM,MAHH;AAIHC,aAAS,iBAAEC,GAAF,CAAMV,WAAWW,YAAjB,EAA+B,MAA/B,CAJN;AAKHC,YAAQ;AAAA,aAAU,iBAAEX,IAAF,CAAOD,WAAWW,YAAlB,EAAgC,EAAET,MAAMW,MAAR,EAAhC,CAAV;AAAA;AALL,GADW;AAQhBC,OAAK;AACHZ,UAAM,aADH;AAEHK,aAAS,yDAFN;AAGHC,UAAM,MAHH;AAIHC,aAAS,iBAAEC,GAAF,CAAMP,WAAWQ,YAAjB,EAA+B,MAA/B,CAJN;AAKHC,YAAQ;AAAA,aAAU,iBAAEX,IAAF,CAAOE,WAAWQ,YAAlB,EAAgC,EAAET,MAAMW,MAAR,EAAhC,CAAV;AAAA;AALL,GARW;AAehBE,WAAS;AACPb,UAAM,aADC;AAEPK,aAAS,6DAFF;AAGPC,UAAM,MAHC;AAIPC,aAAS,iBAAEC,GAAF,CAAMN,eAAeO,YAArB,EAAmC,MAAnC,CAJF;AAKPC,YAAQ;AAAA,aAAU,iBAAEX,IAAF,CAAOG,eAAeO,YAAtB,EAAoC,EAAET,MAAMW,MAAR,EAApC,CAAV;AAAA;AALD;AAfO,CAAlB;;AAwBA,IAAMG,mBAAmB,CACvB;AACEd,QAAM,aADR;AAEEK,WAAS,uCAFX;AAGEC,QAAM;AAHR,CADuB,CAAzB;;IAQqBS,iB;AACnB,6BAAYT,IAAZ,EAAkB;AAAA;;AAChB,SAAKH,SAAL,GAAiB,iBAAEa,MAAF,CACf,EADe,EAEf,KAAKC,oBAAL,CAA0Bd,SAA1B,EAAqCG,KAAKY,WAAL,EAArC,CAFe,EAGfJ,gBAHe,CAAjB;AAKD;;;;4BAEO;AACN,aAAO,mBAASK,MAAT,CAAgB,KAAKhB,SAArB,EACJiB,IADI,CACC;AAAA,eAAWC,OAAX;AAAA,OADD,CAAP;AAED;;;yCAEoBlB,S,EAAWG,I,EAAM;AACpC,UAAIA,SAAS,KAAb,EAAoB;AAClB,eAAO,EAAP;AACD;;AAED,UAAMgB,gBAAgB,iBAAEC,IAAF,CAAOpB,SAAP,CAAtB;;AAEA,UAAImB,cAAcE,QAAd,CAAuBlB,IAAvB,CAAJ,EAAkC;AAChC,eAAOH,UAAUG,IAAV,CAAP;AACD,OAFD,MAEO;AACL,cAAM,IAAImB,KAAJ,4CAAkDnB,IAAlD,OAAN;AACD;AACF;;;;;;kBA1BkBS,iB","file":"boilerplate.dialog.js","sourcesContent":["import _ from 'lodash';\nimport inquirer from 'inquirer';\nimport { projectTypes } from './../constants';\n\nconst webProject = _.find(projectTypes, { name: 'Web' });\nconst iOSProject = _.find(projectTypes, { name: 'iOS' });\nconst androidProject = _.find(projectTypes, { name: 'Android' });\n\nconst questions = {\n  web: {\n    name: 'boilerplate',\n    message: 'So you are a Web developer, tell me what kind of web application you would like to generate?',\n    type: 'list',\n    choices: _.map(webProject.boilerPlates, 'name'),\n    filter: answer => _.find(webProject.boilerPlates, { name: answer }),\n  },\n  ios: {\n    name: 'boilerplate',\n    message: 'So you are an IOS developer, tell me what kind you are.',\n    type: 'list',\n    choices: _.map(iOSProject.boilerPlates, 'name'),\n    filter: answer => _.find(iOSProject.boilerPlates, { name: answer }),\n  },\n  android: {\n    name: 'boilerplate',\n    message: 'So you are an Android developer, tell me what kind you are.',\n    type: 'list',\n    choices: _.map(androidProject.boilerPlates, 'name'),\n    filter: answer => _.find(androidProject.boilerPlates, { name: answer }),\n  },\n};\n\nconst generalQuestions = [\n  {\n    name: 'projectName',\n    message: 'What will be the name of the project?',\n    type: 'string',\n  },\n];\n\nexport default class BoilerplateDialog {\n  constructor(type) {\n    this.questions = _.concat(\n      [],\n      this._getQuestionsForType(questions, type.toLowerCase()),\n      generalQuestions\n    );\n  }\n\n  start() {\n    return inquirer.prompt(this.questions)\n      .then(answers => answers);\n  }\n\n  _getQuestionsForType(questions, type) {\n    if (type === 'dev') {\n      return [];\n    }\n\n    const questionTypes = _.keys(questions);\n\n    if (questionTypes.includes(type)) {\n      return questions[type];\n    } else {\n      throw new Error(`This boilerplate type doens't exist: ${type}.`);\n    }\n  }\n}\n\n"]}