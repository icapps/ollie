{"version":3,"sources":["../../src/utils/git.util.js"],"names":["Git","answers","localRepository","options","development","initialize","initialCommit","setupRemote","Promise","resolve","createRemoteRepository","pushToRemote","message","remoteRepoDialog","projectName","start","remoteRepositoryUrl","repository","path"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;;;;;IAEqBA,G;AACnB,eAAYC,OAAZ,EAAqBC,eAArB,EAAsC;AAAA;;AACpC,SAAKA,eAAL,GAAuBA,eAAvB;AACA,SAAKD,OAAL,GAAeA,OAAf;AACD;;;;;;YAEWE,O,uEAAU,EAAEC,aAAa,KAAf,E;;;;;;uBACd,KAAKC,UAAL,E;;;;uBACA,KAAKC,aAAL,E;;;;uBACA,KAAKC,WAAL,E;;;iDAECC,QAAQC,OAAR,E;;;;;;;;;;;;;;;;;;;;;;;;;uBAID,KAAKC,sBAAL,E;;;;uBACA,KAAKC,YAAL,E;;;;;;;;;;;;;;;;;;iCAGK;AACX,aAAO,gDAAgB,KAAKT,eAArB,YAAP;AACD;;;;;YAEmBU,O,uEAAU,gB;;;;;;uBACtB,gDAAgB,KAAKV,eAArB,a;;;kDACC,gDAAgB,KAAKA,eAArB,sBAAoDU,OAApD,Q;;;;;;;;;;;;;;;;;;;;;;;;;AAIP;AACMC,gC,GAAmB,+BAA2B,KAAKZ,OAAL,CAAaa,WAAxC,C;;uBACSD,iBAAiBE,KAAjB,E;;;AAA5BC,mC;;AACN,gEAAgB,KAAKd,eAArB,4BAA2Dc,mBAA3D;;;;;;;;;;;;;;;;;;mCAGa;AACb,aAAO,gDAAgB,KAAKd,eAArB,0BAAP;AACD;;;0BAEYe,U,EAAYC,I,EAAM;AAC7B,aAAO,kDAAkBD,UAAlB,UAAiCC,IAAjC,qBAAqDA,IAArD,YAAP;AACD;;;;;;kBAzCkBlB,G","file":"git.util.js","sourcesContent":["import fs from 'fs-extra';\nimport autobind from 'autobind-decorator'\nimport exec from './child-process-promise';\nimport Spinner from './spinner';\nimport { createBitbucketApiService } from './../factories/api-service.factory';\nimport RemoteRepositoryDialog from './../dialogs/remote-repository.dialog';\n\nexport default class Git {\n  constructor(answers, localRepository) {\n    this.localRepository = localRepository;\n    this.answers = answers;\n  }\n\n  async setup(options = { development: false }) {\n    await this.initialize();\n    await this.initialCommit();\n    await this.setupRemote();\n\n    return Promise.resolve();\n  }\n\n  async setupRemote() {\n    await this.createRemoteRepository();\n    await this.pushToRemote();\n  }\n\n  initialize() {\n    return exec(`git -C \"${this.localRepository}\" init`);\n  }\n\n  async initialCommit(message = 'initial commit') {\n    await exec(`git -C \"${this.localRepository}\" add .`);\n    return exec(`git -C \"${this.localRepository}\" commit -m '${message}'`);\n  }\n\n  async createRemoteRepository() {\n    // // remote git repository (Bitbucket / Github)\n    const remoteRepoDialog = new RemoteRepositoryDialog(this.answers.projectName);\n    const remoteRepositoryUrl = await remoteRepoDialog.start();\n    exec(`git -C \"${this.localRepository}\" remote add origin ${remoteRepositoryUrl}`)\n  }\n\n  pushToRemote() {\n    return exec(`git -C \"${this.localRepository}\" push origin master`);\n  }\n\n  static clone(repository, path) {\n    return exec(`git clone ${repository} \"${path}\" && rm -rf \"${path}/.git\"`);\n  }\n}\n\n"]}