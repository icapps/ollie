{"version":3,"sources":["../../src/utils/git.util.js"],"names":["Git","answers","localRepository","options","development","initialize","initialCommit","Promise","resolve","message","repository","path"],"mappings":";;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;IAGqBA,G;AACnB,eAAYC,OAAZ,EAAqBC,eAArB,EAAsC;AAAA;;AACpC,SAAKA,eAAL,GAAuBA,eAAvB;AACD;;;;;;YAEWC,O,uEAAU,EAAEC,aAAa,KAAf,E;;;;;;uBACd,KAAKC,UAAL,E;;;;uBACA,KAAKC,aAAL,E;;;iDAECC,QAAQC,OAAR,E;;;;;;;;;;;;;;;;;AAGT;AACA;AACA;AACA;AACA;;;;iCAEa;AACX,aAAO,+CAAe,KAAKN,eAApB,WAAP;AACD;;;;;YAEmBO,O,uEAAU,gB;;;;;;uBACtB,+CAAe,KAAKP,eAApB,Y;;;kDACC,+CAAe,KAAKA,eAApB,qBAAkDO,OAAlD,Q;;;;;;;;;;;;;;;;;AAGT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;0BAEaC,U,EAAYC,I,EAAM;AAC7B,aAAO,kDAAkBD,UAAlB,SAAgCC,IAAhC,mBAAkDA,IAAlD,WAAP;AACD;;;;;;kBA1CkBX,G","file":"git.util.js","sourcesContent":["import fs from 'fs-extra';\nimport autobind from 'autobind-decorator'\nimport exec from './child-process-promise';\nimport Spinner from './spinner';\nimport { createBitbucketApiService } from './../factories/api-service.factory';\n\n@autobind\nexport default class Git {\n  constructor(answers, localRepository) {\n    this.localRepository = localRepository;\n  }\n\n  async setup(options = { development: false }) {\n    await this.initialize();\n    await this.initialCommit();\n\n    return Promise.resolve();\n  }\n\n  // async setupRemote() {\n  //   await this.createRemoteRepository();\n  //   // await this.setRemote();\n  //   // await this.pushToRemote();\n  // }\n\n  initialize() {\n    return exec(`git -C ${this.localRepository} init`);\n  }\n\n  async initialCommit(message = 'initial commit') {\n    await exec(`git -C ${this.localRepository} add .`);\n    return exec(`git -C ${this.localRepository} commit -m '${message}'`);\n  }\n\n  // setRemote() {\n  //   return exec(`git -C ${this.localRepository} remote add origin ${this.remoteRepository}`);\n  // }\n\n  // async createRemoteRepository() {\n  //   const remoteRepositoryUrl = await this.apiService.createRepository();\n  //   return exec(`git -C ${this.localRepository} remote add origin ${remoteRepositoryUrl}`);\n  // }\n\n  // pushToRemote() {\n  //   return exec(`git -C ${this.localRepository} push origin master`);\n  // }\n\n  static clone(repository, path) {\n    return exec(`git clone ${repository} ${path} && rm -rf ${path}/.git`);\n  }\n}\n\n"]}