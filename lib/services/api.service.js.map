{"version":3,"sources":["../../src/services/api.service.js"],"names":["ApiServiceError","error","message","details","Error","ApiService","answers","username","gitServiceUsername","password","gitServicePassword","repoName","projectName","toLowerCase","urlObject","parse","gitService","api","service","name","protocol","host","pathname","remote","repository","authorization","Buffer","toString","body","requestOptions","detail","Promise","resolve","reject","options","url","getRequestUrl","getRequestBody","method","json","headers","getHeaders","response","statusCode","getRemoteRepo","GithubApiService","private","BitBucketApiService","is_private"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;IAEMA,e;;;AACJ,2BAAYC,KAAZ,EAAmB;AAAA;;AACjB,QAAMC,UAAUD,QAASA,MAAME,OAAN,IAAiBF,MAAMC,OAAhC,GAA2C,eAA3D;AADiB,6HAEXA,OAFW;AAGlB;;;EAJ2BE,K;;IAOxBC,U;AACJ,sBAAYC,OAAZ,EAAqB;AAAA;;AACnB,SAAKC,QAAL,GAAgBD,QAAQE,kBAAxB;AACA,SAAKC,QAAL,GAAgBH,QAAQI,kBAAxB;AACA,SAAKC,QAAL,GAAgBL,QAAQM,WAAR,CAAoBC,WAApB,EAAhB;;AAEA,QAAMC,YAAY,cAAIC,KAAJ,CAAUT,QAAQU,UAAR,CAAmBC,GAA7B,CAAlB;AACA,SAAKC,OAAL,GAAe;AACbC,YAAMb,QAAQU,UAAR,CAAmBG,IADZ;AAEbC,gBAAUN,UAAUM,QAFP;AAGbC,YAAMP,UAAUO,IAHH;AAIbC,gBAAUR,UAAUQ,QAJP;AAKbC,cAAQjB,QAAQU,UAAR,CAAmBQ;AALd,KAAf;AAOD;;AAED;;;;;oCACgB;AACd,YAAMpB,MAAM,wCAAN,CAAN;AACD;;;qCAEgB;AACf,YAAMA,MAAM,wCAAN,CAAN;AACD;;;iCAEW;AACV,aAAO,EAAEqB,eAAe,WAAW,IAAIC,MAAJ,CAAW,KAAKnB,QAAL,GAAgB,GAAhB,GAAsB,KAAKE,QAAtC,EAAgDkB,QAAhD,CAAyD,QAAzD,CAA5B,EAAgG,cAAc,SAA9G,EAAP;AACD;;;oCAEe;AACd,sBAAc,KAAKT,OAAL,CAAaK,MAA3B,SAAqC,KAAKhB,QAA1C,SAAsD,KAAKI,QAA3D;AACD;;;mCAEciB,I,EAAMC,c,EAAgB;AACnC,UAAI,CAACD,KAAK3B,KAAV,EAAiB,OAAO,EAAEC,SAAS,eAAX,EAA4B2B,8BAA5B,EAAP;AACjB,aAAQ;AACN3B,iBAAS0B,KAAK3B,KAAL,CAAW6B,MAAX,IAAqBF,KAAK3B,KAAL,CAAWC,OADnC;AAEN2B;AAFM,OAAR;AAID;;;uCAEkB;AAAA;;AACjB,aAAO,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAMC,UAAU;AACdC,eAAK,OAAKC,aAAL,EADS;AAEdR,gBAAM,OAAKS,cAAL,EAFQ;AAGdC,kBAAQ,MAHM;AAIdC,gBAAM,IAJQ;AAKdC,mBAAS,OAAKC,UAAL;AALK,SAAhB;AAOA,+BAAQP,OAAR,EAAiB,UAACjC,KAAD,EAAQyC,QAAR,EAAkBd,IAAlB,EAA2B;AAC1C,cAAI,CAAC3B,KAAD,IAAUyC,SAASC,UAAT,GAAsB,GAApC,EAAyCX,QAAQ,OAAKY,aAAL,EAAR,EAAzC,KACKX,OAAOhC,SAAS,IAAID,eAAJ,CAAoB4B,KAAK3B,KAAzB,CAAhB;AACN,SAHD;AAID,OAZM,CAAP;AAaD;;;;;;IAGU4C,gB,WAAAA,gB;;;;;;;;;;;qCACM;AACf,aAAO;AACL1B,cAAM,KAAKR,QADN;AAELmC,iBAAS;AAFJ,OAAP;AAID;;;oCAEe;AACd,aAAO,mCAAP;AACD;;;;EAVmCzC,U;;IAczB0C,mB,WAAAA,mB;;;;;;;;;;;qCACM;AACf,aAAO;AACL5B,cAAM,KAAKR,QADN;AAELqC,oBAAY;AAFP,OAAP;AAID;;;oCAEe;AACd,aAAO,6CAAP;AACD;;;;EAVsC3C,U","file":"api.service.js","sourcesContent":["import request from 'request';\nimport url from 'url';\n\nclass ApiServiceError extends Error {\n  constructor(error) {\n    const message = error ? (error.details || error.message) : 'Unknown error';\n    super(message);\n  }\n}\n\nclass ApiService {\n  constructor(answers) {\n    this.username = answers.gitServiceUsername;\n    this.password = answers.gitServicePassword;\n    this.repoName = answers.projectName.toLowerCase();\n\n    const urlObject = url.parse(answers.gitService.api);\n    this.service = {\n      name: answers.gitService.name,\n      protocol: urlObject.protocol,\n      host: urlObject.host,\n      pathname: urlObject.pathname,\n      remote: answers.gitService.repository,\n    };\n  }\n\n  // TODO: create a repository under a new/existing team/project - replace serviceUsername with teamName for example\n  getRequestUrl() {\n    throw Error('Implement in ApiService implementation');\n  }\n\n  getRequestBody() {\n    throw Error('Implement in ApiService implementation');\n  }\n\n  getHeaders(){\n    return { authorization: 'Basic ' + new Buffer(this.username + ':' + this.password).toString('base64'), 'User-Agent': 'request' }\n  }\n\n  getRemoteRepo() {\n    return `git@${this.service.remote}:${this.username}/${this.repoName}.git`;\n  }\n\n  getErrorObject(body, requestOptions) {\n    if (!body.error) return { message: 'Unknown error', requestOptions };\n    return ({\n      message: body.error.detail || body.error.message,\n      requestOptions,\n    });\n  }\n\n  createRepository() {\n    return new Promise((resolve, reject) => {\n      const options = {\n        url: this.getRequestUrl(),\n        body: this.getRequestBody(),\n        method: 'POST',\n        json: true,\n        headers: this.getHeaders(),\n      };\n      request(options, (error, response, body) => {\n        if (!error && response.statusCode < 400) resolve(this.getRemoteRepo());\n        else reject(error || new ApiServiceError(body.error));\n      });\n    });\n  }\n}\n\nexport class GithubApiService extends ApiService {\n  getRequestBody() {\n    return {\n      name: this.repoName,\n      private: false,\n    };\n  }\n\n  getRequestUrl() {\n    return 'https://api.github.com/user/repos';\n  }\n\n}\n\nexport class BitBucketApiService extends ApiService {\n  getRequestBody() {\n    return {\n      name: this.repoName,\n      is_private: true,\n    };\n  }\n\n  getRequestUrl() {\n    return 'https://api.bitbucket.org/1.0/repositories/'\n  }\n}\n"]}