{"version":3,"sources":["../../src/services/api.service.js"],"names":["ApiServiceError","error","message","details","Error","ApiService","answers","username","gitServiceUsername","password","gitServicePassword","repoName","projectName","toLowerCase","urlObject","parse","gitService","api","service","name","protocol","host","pathname","remote","repository","body","requestOptions","detail","Promise","resolve","reject","options","url","getRequestUrl","getRequestBody","method","json","response","statusCode","getRemoteRepo","GithubApiService","private","BitBucketApiService","is_private"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;IAEMA,e;;;AACJ,2BAAYC,KAAZ,EAAmB;AAAA;;AACjB,QAAMC,UAAUD,QAASA,MAAME,OAAN,IAAiBF,MAAMC,OAAhC,GAA2C,eAA3D;AADiB,6HAEXA,OAFW;AAGlB;;;EAJ2BE,K;;IAOxBC,U;AACJ,sBAAYC,OAAZ,EAAqB;AAAA;;AACnB,SAAKC,QAAL,GAAgBD,QAAQE,kBAAxB;AACA,SAAKC,QAAL,GAAgBH,QAAQI,kBAAxB;AACA,SAAKC,QAAL,GAAgBL,QAAQM,WAAR,CAAoBC,WAApB,EAAhB;AACA;;AAEA,QAAMC,YAAY,cAAIC,KAAJ,CAAUT,QAAQU,UAAR,CAAmBC,GAA7B,CAAlB;AACA,SAAKC,OAAL,GAAe;AACbC,YAAMb,QAAQU,UAAR,CAAmBG,IADZ;AAEbC,gBAAUN,UAAUM,QAFP;AAGbC,YAAMP,UAAUO,IAHH;AAIbC,gBAAUR,UAAUQ,QAJP;AAKbC,cAAQjB,QAAQU,UAAR,CAAmBQ;AALd,KAAf;AAOD;;AAED;;;;;oCACgB;AACd,YAAMpB,MAAM,wCAAN,CAAN;AACD;;;qCAEgB;AACf,YAAMA,MAAM,wCAAN,CAAN;AACD;;;oCAEe;AACd,sBAAc,KAAKc,OAAL,CAAaK,MAA3B,SAAqC,KAAKhB,QAA1C,SAAsD,KAAKI,QAA3D;AACD;;;iCAEY;AACX,aAAU,KAAKO,OAAL,CAAaE,QAAvB,UAAoC,KAAKF,OAAL,CAAaK,MAAjD,SAA2D,KAAKhB,QAAhE,SAA4E,KAAKI,QAAjF;AACD;;;mCAEcc,I,EAAMC,c,EAAgB;AACnC,UAAI,CAACD,KAAKxB,KAAV,EAAiB,OAAO,EAAEC,SAAS,eAAX,EAA4BwB,8BAA5B,EAAP;AACjB,aAAQ;AACNxB,iBAASuB,KAAKxB,KAAL,CAAW0B,MAAX,IAAqBF,KAAKxB,KAAL,CAAWC,OADnC;AAENwB;AAFM,OAAR;AAID;;;uCAEkB;AAAA;;AACjB,aAAO,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAMC,UAAU;AACdC,eAAK,OAAKC,aAAL,EADS;AAEdR,gBAAM,OAAKS,cAAL,EAFQ;AAGdC,kBAAQ,MAHM;AAIdC,gBAAM;AAJQ,SAAhB;;AAOA,+BAAQL,OAAR,EAAiB,UAAC9B,KAAD,EAAQoC,QAAR,EAAkBZ,IAAlB,EAA2B;AAC1C,cAAI,CAACxB,KAAD,IAAUoC,SAASC,UAAT,KAAwB,GAAtC,EAA2CT,QAAQ,OAAKU,aAAL,EAAR,EAA3C,KACKT,OAAO7B,SAAS,IAAID,eAAJ,CAAoByB,KAAKxB,KAAzB,CAAhB;AACN,SAHD;AAID,OAZM,CAAP;AAaD;;;;;;IAGUuC,gB,WAAAA,gB;;;;;;;;;;;;AACX;qCACiB;AACf,aAAO;AACLrB,cAAM,KAAKR,QADN;AAEL;AACA8B,iBAAS;AAHJ,OAAP;AAKD;;;oCAEe;AACd,aAAU,KAAKvB,OAAL,CAAaE,QAAvB,UAAoC,KAAKb,QAAzC,SAAqD,KAAKE,QAA1D,SAAsE,KAAKS,OAAL,CAAaG,IAAnF,GAA0F,KAAKH,OAAL,CAAaI,QAAvG,cAAwH,KAAKf,QAA7H,SAAyI,KAAKI,QAA9I;AACD;;;;EAZmCN,U;;IAgBzBqC,mB,WAAAA,mB;;;;;;;;;;;qCACM;AACf,aAAO;AACLC,oBAAY;AADP,OAAP;AAGD;;;oCAEe;AACd,aAAU,KAAKzB,OAAL,CAAaE,QAAvB,UAAoC,KAAKb,QAAzC,SAAqD,KAAKE,QAA1D,SAAsE,KAAKS,OAAL,CAAaG,IAAnF,GAA0F,KAAKH,OAAL,CAAaI,QAAvG,sBAAgI,KAAKf,QAArI,SAAiJ,KAAKI,QAAtJ;AACD;;;;EATsCN,U","file":"api.service.js","sourcesContent":["import request from 'request';\nimport url from 'url';\n\nclass ApiServiceError extends Error {\n  constructor(error) {\n    const message = error ? (error.details || error.message) : 'Unknown error';\n    super(message);\n  }\n}\n\nclass ApiService {\n  constructor(answers) {\n    this.username = answers.gitServiceUsername;\n    this.password = answers.gitServicePassword;\n    this.repoName = answers.projectName.toLowerCase();\n    // this.repoDescription = answers.description;\n\n    const urlObject = url.parse(answers.gitService.api);\n    this.service = {\n      name: answers.gitService.name,\n      protocol: urlObject.protocol,\n      host: urlObject.host,\n      pathname: urlObject.pathname,\n      remote: answers.gitService.repository,\n    };\n  }\n\n  // TODO: create a repository under a new/existing team/project - replace serviceUsername with teamName for example\n  getRequestUrl() {\n    throw Error('Implement in ApiService implementation');\n  }\n\n  getRequestBody() {\n    throw Error('Implement in ApiService implementation');\n  }\n\n  getRemoteRepo() {\n    return `git@${this.service.remote}:${this.username}/${this.repoName}.git`;\n  }\n\n  getRepoUrl() {\n    return `${this.service.protocol}//${this.service.remote}/${this.username}/${this.repoName}`;\n  }\n\n  getErrorObject(body, requestOptions) {\n    if (!body.error) return { message: 'Unknown error', requestOptions };\n    return ({\n      message: body.error.detail || body.error.message,\n      requestOptions,\n    });\n  }\n\n  createRepository() {\n    return new Promise((resolve, reject) => {\n      const options = {\n        url: this.getRequestUrl(),\n        body: this.getRequestBody(),\n        method: 'POST',\n        json: true,\n      };\n\n      request(options, (error, response, body) => {\n        if (!error && response.statusCode === 200) resolve(this.getRemoteRepo());\n        else reject(error || new ApiServiceError(body.error));\n      });\n    });\n  }\n}\n\nexport class GithubApiService extends ApiService {\n  // see https://developer.github.com/v3/repos/#create\n  getRequestBody() {\n    return {\n      name: this.repoName,\n      // description: this.repoDescription,\n      private: false,\n    };\n  }\n\n  getRequestUrl() {\n    return `${this.service.protocol}//${this.username}:${this.password}@${this.service.host}${this.service.pathname}repos/${this.username}/${this.repoName}`;\n  }\n\n}\n\nexport class BitBucketApiService extends ApiService {\n  getRequestBody() {\n    return {\n      is_private: true,\n    };\n  }\n\n  getRequestUrl() {\n    return `${this.service.protocol}//${this.username}:${this.password}@${this.service.host}${this.service.pathname}/repositories/${this.username}/${this.repoName}`;\n  }\n}\n"]}